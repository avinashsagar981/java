// Main.java
public class Main {
    public static void main(String[] args) {
        UnencapsulatedStudent unencapsulated = new UnencapsulatedStudent("Bob", 25);
        unencapsulated.age = -5; // Direct access, no encapsulation
        System.out.println("Unencapsulated Name: " + unencapsulated.name);
        System.out.println("Unencapsulated Age: " + unencapsulated.age);

        EncapsulatedStudent encapsulated = new EncapsulatedStudent("Alice", 20);
        System.out.println("Encapsulated Name: " + encapsulated.getName());
        System.out.println("Encapsulated Age: " + encapsulated.getAge());
    }
}

class UnencapsulatedStudent {
    public String name;
    public int age;

    public UnencapsulatedStudent(String name, int age) {
        this.name = name;
        this.age = age;
    }
}

class EncapsulatedStudent {
    private String name;
    private int age;

    public EncapsulatedStudent(String name, int age) {
        this.name = name;
        this.age = age;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public int getAge() {
        return age;
    }

    public void setAge(int age) {
        this.age = age;
    }
===================================================================================================================
Explanation
===================================================================================================================


    File Structure:
        Only one public class (Main) to match Main.java, avoiding the "multiple public classes" error.
        UnencapsulatedStudent and EncapsulatedStudent are non-public classes in the same file.
    UnencapsulatedStudent:
        Public fields (name, age) allow direct access and modification (e.g., unencapsulated.age = -5).
        Shows lack of encapsulation, as fields can be changed freely.
    EncapsulatedStudent:
        Private fields (name, age) prevent direct access.
        Getter (getName, getAge) and setter (setName, setAge) methods control access.
        No if statements or validation for simplicity.
    Main Class:
        Creates and tests both classes.
        Prints fields directly for UnencapsulatedStudent and uses getters for EncapsulatedStudent.
    Fixes for Error:
        Added missing closing braces for all classes.
        Ensured proper class structure to avoid the "reached end of file while parsing" error.
